PLAYER_X, PLAYER_O, EMPTY = 'X', 'O', '.'

def printBoard(board):
    print("\n".join(" ".join(row) for row in board), "\n")

def isMovesLeft(board):
    return any(cell == EMPTY for row in board for cell in row)

def evaluate(b):
    lines = b + [list(col) for col in zip(*b)] + [[b[i][i] for i in range(3)], [b[i][2-i] for i in range(3)]]
    for line in lines:
        if line.count(PLAYER_X) == 3: return 10
        if line.count(PLAYER_O) == 3: return -10
    return 0

def minimax(board, depth, isMax):
    score = evaluate(board)
    if score: return score - depth if isMax else score + depth
    if not isMovesLeft(board): return 0

    best = -1000 if isMax else 1000
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X if isMax else PLAYER_O
                val = minimax(board, depth + 1, not isMax)
                board[i][j] = EMPTY
                best = max(best, val) if isMax else min(best, val)
    return best

def findBestMove(board):
    bestVal, bestMove = -1000, (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X
                moveVal = minimax(board, 0, False)
                board[i][j] = EMPTY
                if moveVal > bestVal:
                    bestVal, bestMove = moveVal, (i, j)
    return bestMove

if _name_ == "_main_":
    board = [
        [PLAYER_X, PLAYER_O, PLAYER_X],
        [PLAYER_O, PLAYER_X, EMPTY],
        [EMPTY, PLAYER_O, PLAYER_X]
    ]
    print("Current Board:")
    printBoard(board)
    move = findBestMove(board)
    print(f"Best Move: {move}")
    if move != (-1, -1):
        board[move[0]][move[1]] = PLAYER_X
        print("Board after best move:")
        printBoard(board)
    else:
        print("No moves left or game over.")
